program Enhancer;

uses
  SysUtils, Types;

// Global variable
const
  Keywords: array[0..4] of string = ('Yesterday', 'recently', 'last week', 'last day', 'last month');

procedure ReadInputFromFile(inputFile: string; var inputStr: string);
var
  InputFileText: TextFile;
begin
  AssignFile(InputFileText, inputFile);
  Reset(InputFileText);
  ReadLn(InputFileText, inputStr);
  CloseFile(InputFileText);
end;

// Counting the number of words
function CountWords(const inputStr: string): Integer;
var
  words: TStringArray;
  word: string;
begin
  words := inputStr.Split([' ', '.', '?', '!', ';', ':']);
  Result := 0;

  for word in words do
  begin
    if word <> '' then
      Inc(Result);
  end;
end;

// Counting the number of sentences
function CountSentences(const inputStr: string): Integer;
var
  sentences: TStringArray;
  sentence: string;
begin
  sentences := inputStr.Split(['.', '?', '!', ';', ':']);
  Result := 0;

  for sentence in sentences do
  begin
    if sentence.Trim <> '' then
      Inc(Result);
  end;
end;

// Check if a verb is in past tense
function IsVerbInPastTense(const verb: string): Boolean;
begin
  Result := (Length(verb) >= 2) and (Copy(verb, Length(verb) - 1, 2) = 'ed');
end;

// Check if a sentence contains any keywords
function ContainsKeywords(const sentence: string): Boolean;
var
  keyword: string;
begin
  Result := False;
  for keyword in Keywords do
  begin
    if Pos(keyword, sentence) > 0 then
    begin
      Result := True;
      Break;
    end;
  end;
end;

// Replace common words with alternative suggestions
function FindAndSuggestReplace(const inputStr: string): string;
begin
  Result := StringReplace(inputStr, 'important', 'crucial', [rfIgnoreCase]);
  Result := StringReplace(Result, 'happy', 'cheerful', [rfIgnoreCase]);
  Result := StringReplace(Result, 'useful', 'functional', [rfIgnoreCase]);
end;

// Check for past tense errors and keywords in a sentence
procedure CheckPastTenseErrors(const sentence: string);
var
  words: TStringArray;
  word: string;
begin
  words := sentence.Split([' ', '.', ',', '?', '!', ';', ':']);

  for word in words do
  begin
    if IsVerbInPastTense(word) or ContainsKeywords(sentence) then
      Writeln('Possible tense error: "', word, '". Please check it!');
  end;
end;

// Main procedure to enhance the input sentence
procedure Enhance;
var
  inputStr: string;
  MyTime: TDateTime;
  enhancedStr: string;
begin
  ReadInputFromFile('C:\Users\student\Desktop\hi.txt', inputStr);
  MyTime := Now;

  Writeln();
  Writeln('[Information of Sentence]');
  Writeln('Number of words:', CountWords(inputStr));
  Writeln('Number of sentences:', CountSentences(inputStr));

  Writeln();
  Writeln('[Enhancer]');
  enhancedStr := FindAndSuggestReplace(inputStr);
  if enhancedStr <> inputStr then
    Writeln('Suggested replacement:', enhancedStr);

  Writeln();
  CheckPastTenseErrors(inputStr);

  Writeln();
  Writeln('[The Checking time is]: ' + FormatDateTime('[yyyy-mm-dd hh:nn]', MyTime));
end;

begin
  Enhance;
  Readln;
end. 
